library(plyr)
library(dplyr)
library(ggpubr)
`dfraw_201` <- read.csv("/Users/bethfisher/Downloads/PARTICIPANT_Simcolourproject_2stim_asymm_v3_2020-10-24_13h41.01.274.csv")
#select relevant trial variables
trial_vars<- c( "participant",
"Colour_1", "Colour_2", "Colour1", "Colour1",
"similarity", "response_timeprac", "responsetime", "Ecc")
dftrials_201 <- dfraw_201[trial_vars]
#select relevant trial variables
trial_vars<- c( "participant",
"Colour_1", "Colour_2", "Colour1", "Colour1",
"similarity", "response_timeprac", "response_time", "Ecc")
dftrials_201 <- dfraw_201[trial_vars]
View(dftrials_201)
View(dftrials_201)
#select relevant trial variables
trial_vars<- c( "participant",
"Colour_1", "Colour_2", "Colour1", "Colour2",
"similarity", "response_timeprac", "response_time", "Ecc")
dftrials_201 <- dfraw_201[trial_vars]
dftrialsduring <- dftrials_201[which(!is.na(dftrials_201$response_time)),]
View(dftrialsduring)
View(dftrialsduring)
library(plyr)
library(dplyr)
library(ggpubr)
`dfraw_201` <- read.csv("/Users/bethfisher/Documents/Simcolourproject_online/data/_Simcolourproject_2stim_asymm_good_2020_Oct_24_1404.csv")
#select relevant trial variables
trial_vars<- c( "participant",
"Colour_1", "Colour_2", "Colour1", "Colour2",
"similarity", "response_timeprac", "response_time", "Ecc")
dftrials_201 <- dfraw_201[trial_vars]
library(plyr)
library(dplyr)
library(ggpubr)
`dfraw_201` <- read.csv("/Users/bethfisher/Documents/Simcolourproject_online/data/_Simcolourproject_2stim_asymm_good_2020_Oct_24_1404.csv")
#select relevant trial variables
trial_vars<- c( "participant",
"Colour_1", "Colour_2", "Colour1", "Colour2",
"similarity", "response_timeprac", "response_time", "Ecc")
dftrials_201 <- dfraw_201[trial_vars]
`dfraw_201` <- read.csv("/Users/bethfisher/Documents/Simcolourproject_online/data/_Simcolourproject_2stim_asymm_good_2020_Oct_24_1404.csv")
#select relevant trial variables
trial_vars<- c( "participant",
"Colour_1", "Colour_2", "Colour1", "Colour2",
"similarity", "response_time", "response_time", "Ecc")
dftrials_201 <- dfraw_201[trial_vars]
#select relevant trial rows
dftrialsduring <- dftrials_201[which(!is.na(dftrials_201$response_time)),]
stimuli_number = 9
response_type_list = c('during')
response_names = c('During')
trial_types = c('during')
catch_trial_number = 20
trace_cutoff = 2 # mean dissimilarity for physically identical colours must be below this
antitrace_cutoff = 3.5 # mean dissimilarity accepted for maximally physically different colours must be above this
rt_cutoff = 700 # mean reaction times must be above this
exclude_noncompliant = FALSE
plotsubjects = FALSE
plot_within_between = FALSE
plotexpsummary = FALSE
across = FALSE
population = FALSE
# live dangerously, get rid of pesky warnings
oldw <- getOption("warn")
options(warn = -1)
shhh <- suppressPackageStartupMessages # stops annoying warnings when loading libraries
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(MASS)
library(Matrix)
library(reshape2)
library(ape) # stats
library(vegan) # stats
library(RColorBrewer)
library(cocor)
library(DescTools)
library(reshape2)
library(grid)
library(ggplotify)
# rainbowcloud theme for plotting, stolen from:
# https://micahallen.org/2018/03/15/introducing-raincloud-plots/?utm_campaign=News&utm_medium=Community&utm_source=DataCamp.com
raincloud_theme = theme(
text = element_text(size = 10),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14),
axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.title=element_text(size=16),
legend.text=element_text(size=16),
legend.position = "right",
plot.title = element_text(lineheight=.8, face="bold", size = 16),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))
# stealing ability to make flat violin plots
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
# Plot a dissimilarity matrix
dissimplot <- function(datadf,colors,dependent='color'){
plot <- ggplot(datadf, aes(x = Color1, y = Color2)) +
theme(axis.text.x = element_text(colour = colors), axis.text.y = element_text(colour = colors),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))
# stuff that's standard across plot types
plot <- plot + geom_raster(aes(fill = similarity)) +
labs(title = 'Temporal Plot') +
scale_fill_gradientn(colours = c("white","black")) +
guides(fill=guide_legend(title="Dissimilarity"))
return(plot)
}
# Similarity judgment histogram
simhistplot <- function(datadf){
plot <- ggplot(datadf, aes(x = similarity)) + geom_bar(aes(y = ..prop..)) +
scale_x_discrete(limits=c(0,1,2,3,4,5,6,7), name = 'Dissimilarity') +
ylab('Frequency') + ylim(0,0.8)
return(plot)
}
simhistplot_summary <- function(datadf){
datadf$subject <- as.character(datadf$subject) # necessary for visualisation
plot <- ggplot(datadf, aes(x = similarity)) +
geom_line(stat='count',aes(y = ..prop..,group = subject),color='#CC9933') +
geom_line(stat='count',aes(y = ..prop..),size=1.5) +
scale_x_discrete(limits=c(0,1,2,3,4,5,6,7), name = 'Dissimilarity') +
ylab('Frequency') + ylim(0,0.8)
return(plot)
}
# reaction time for each similarity
rsplot <- function(datadf){
plot <- ggplot(datadf, aes(x= similarity, y=response_time)) +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = mean_se, geom = "errorbar", size =0.5, aes(width=0.5)) +
scale_x_discrete(limits=c(0,1,2,3,4,5,6,7), name = 'Dissimilarity') + ylab('Reaction Time (ms)') +
theme(legend.position = "none") +
ylim(0,4000) # anyone taking more than 4 seconds has probably mindwandered
return(plot)
}
rsplot_summary <- function(datadf){
datadf$subject <- as.character(datadf$subject) # necessary for visualisation
plot <- ggplot(datadf, aes(x= similarity, y=response_time,group = subject, color = subject)) +
stat_summary(fun.y = mean, geom = "line", size=0.8) +
#stat_summary(fun.data = mean_se, geom = "errorbar", size =0.5, aes(width=0.5)) +
scale_x_discrete(limits=c(0,1,2,3,4,5,6,7), name = 'Dissimilarity') + ylab('Mean Reaction Time (ms)') +
theme(legend.position = "none") +
ylim(0,4000) # anyone taking more than 4 seconds has probably mindwandered
return(plot)
}
# reaction time raincloud plot
rsplot_raincloud <- function(datadf,xtype='linear'){
datadf$subject <- as.character(datadf$subject) # necessary for visualisation
datadf$similarity <- as.character(datadf$similarity) # necessary for visualisation
ylabtext = 'Reaction Time (ms)'
plot <- ggplot(datadf, aes(y = response_time, x = similarity, fill = similarity)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8) +
geom_point(aes(y = response_time, color = similarity),
position = position_jitter(width = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, guides = FALSE, outlier.shape = NA, alpha = 0.5) +
expand_limits(x = 5.25) +
guides(fill = FALSE) +
guides(color = FALSE) +
scale_color_brewer(palette = "Spectral") +
scale_fill_brewer(palette = "Spectral") +
xlab('Dissimilarity') + ylab("Reaction Time (ms)")
# coord_flip() +
theme_bw() +
raincloud_theme
if(xtype == 'log'){
plot <- plot + scale_y_continuous(trans='log10')
} else{
plot <- plot + ylim(0,5000)
}
return(plot)
}
rsplot_raincloud(datadf,xtype='linear')
# correlation between reaction times and similarity judgements
# grouping at individual trial, individual participant, experiment or entire population level
rt_similarity_cor <- function(datadf,level='participant'){
if(level=="participant"){
datadf <- datadf %>%
group_by(subject) %>%
mutate(rt_similarity_correlation = cor(similarity,response_time))
datadf <- aggregate(datadf, by=list(datadf$subject), FUN = mean)
}
return(datadf)
}
rt_similarity_plot <- function(datadf,xlabel='BLANK'){
datadf <- rt_similarity_cor(datadf)
datadf[xlabel] = xlabel
plot <- ggplot(datadf,aes(x=xlabel,y=rt_similarity_correlation)) +
geom_boxplot() +
geom_dotplot(binaxis='y',stackdir='center',dotsize=0.75) +
theme(text = element_text(size=15)) + xlab("")
ggtitle(title)
plot <- plot + ylab("Correlation (Spearman)") + ylim(-1,1)
plot <- plot + geom_hline(yintercept=0, linetype="dashed", color = "blue")
return(plot)
}
# subject info
sumplot <- function(datadf){
# change ms to s, add the delay for each trial
datadf$response_time <- ((datadf$response_time + 0.125*nrow(datadf)) / 1000)
plot <- ggplot(datadf, aes(x=subject, y = response_time)) +
stat_summary(fun.y = sum, geom = "bar") + ylim(0,1000) +
ylab('Response Time Total') + theme(axis.title.x=element_blank(), axis.text.x = element_text(size=20))
return(plot)
}
# get median reaction time
rt_avg <- function(datadf){
return(median(datadf$response_time))
}
# function to aggregate everyone's data together
aggregate_df <- function(datadf,dependent='color'){
# aggregate everyone's data together for the matrices
everyonedata <- aggregate(datadf, by=list(
datadf$Color_1,
datadf$Color_2,
datadf$Circle_1,
datadf$Circle_2,
datadf$bin1,
datadf$bin2
), FUN=mean,
)
# correct the column names
everyonedata$Color_1 <- everyonedata$Group.1
everyonedata$Color_2 <- everyonedata$Group.2
everyonedata$Circle_1 <- everyonedata$Group.3
everyonedata$Circle_2 <- everyonedata$Group.4
everyonedata$bin1 <- everyonedata$Group.5
everyonedata$bin2 <- everyonedata$Group.6
return(everyonedata)
}
# changing color values from RGB to hex for graphing purpose
dftrialsduring$Colour1 <- as.character(datadf$Colour1)
# changing color values from RGB to hex for graphing purpose
dftrialsduring$Colour1 <- as.character(dftrialsduring$Colour1)
dftrialsduring$Colour1 <- revalue(dftrialsduring$Colour1,
c(  "1" = '#FF0000',
"2" = '#FFAA00',
"3" = '#AAFF00',
"4" = '#00FF00',
"5" = '#00FFA9',
"6" = '#00A9FF',
"7" = '#0000FF',
"8" = '#AA00FF',
"9" = '#FF00AA'))
dftrialsduring$Colour2 <- as.character(dftrialsduring$Colour2)
dftrialsduring$Colour2 <- revalue(dftrialsduring$Colour2,
c(  "1" = '#FF0000',
"2" = '#FFAA00',
"3" = '#AAFF00',
"4" = '#00FF00',
"5" = '#00FFA9',
"6" = '#00A9FF',
"7" = '#0000FF',
"8" = '#AA00FF',
"9" = '#FF00AA'))
dissimplot(dftrialsduring,colors,dependent='color')
dissimplot(dftrialsduring,colors,dependent='color')
# Plot a dissimilarity matrix
dissimplot <- function(datadf,colors,dependent='color'){
plot <- ggplot(datadf, aes(x = Colour1, y = Colour2)) +
theme(axis.text.x = element_text(colour = colors), axis.text.y = element_text(colour = colors),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))
# stuff that's standard across plot types
plot <- plot + geom_raster(aes(fill = similarity)) +
labs(title = 'Temporal Plot') +
scale_fill_gradientn(colours = c("white","black")) +
guides(fill=guide_legend(title="Dissimilarity"))
return(plot)
}
dissimplot(dftrialsduring,colors,dependent='color')
# Plot a dissimilarity matrix
dissimplot <- function(datadf,colors,dependent='color'){
plot <- ggplot(dftrialsduring, aes(x = Colour1, y = Colour2)) +
theme(axis.text.x = element_text(colour = colors), axis.text.y = element_text(colour = colors),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))
# stuff that's standard across plot types
plot <- plot + geom_raster(aes(fill = similarity)) +
labs(title = 'Temporal Plot') +
scale_fill_gradientn(colours = c("white","black")) +
guides(fill=guide_legend(title="Dissimilarity"))
return(plot)
}
dissimplot(dftrialsduring,colors,dependent='color')
dftrials<- dftrials_201[which(!is.na(dftrials_201$Colour1)),]
# Plot a dissimilarity matrix
dissimplot <- function(dftrials,colors,dependent='color'){
plot <- ggplot(dftrial, aes(x = Colour1, y = Colour2)) +
theme(axis.text.x = element_text(colour = colors), axis.text.y = element_text(colour = colors),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))
# stuff that's standard across plot types
plot <- plot + geom_raster(aes(fill = similarity)) +
labs(title = 'Temporal Plot') +
scale_fill_gradientn(colours = c("white","black")) +
guides(fill=guide_legend(title="Dissimilarity"))
return(plot)
}
dissimplot(dftrials,colors,dependent='color')
# Plot a dissimilarity matrix
dissimplot <- function(dftrials,colors,dependent='color'){
plot <- ggplot(dftrials, aes(x = Colour1, y = Colour2)) +
theme(axis.text.x = element_text(colour = colors), axis.text.y = element_text(colour = colors),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))
# stuff that's standard across plot types
plot <- plot + geom_raster(aes(fill = similarity)) +
labs(title = 'Temporal Plot') +
scale_fill_gradientn(colours = c("white","black")) +
guides(fill=guide_legend(title="Dissimilarity"))
return(plot)
}
dissimplot(dftrials,colors,dependent='color')
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(MASS)
library(Matrix)
library(reshape2)
library(ape) # stats
library(vegan) # stats
library(RColorBrewer)
library(cocor)
library(DescTools)
library(reshape2)
library(grid)
library(ggplotify)
# Plot a dissimilarity matrix
dissimplot <- function(dftrials,colors,dependent='color'){
plot <- ggplot(dftrials, aes(x = Colour1, y = Colour2)) +
theme(axis.text.x = element_text(colour = colors), axis.text.y = element_text(colour = colors),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))
# stuff that's standard across plot types
plot <- plot + geom_raster(aes(fill = similarity)) +
labs(title = 'Temporal Plot') +
scale_fill_gradientn(colours = c("white","black")) +
guides(fill=guide_legend(title="Dissimilarity"))
return(plot)
}
dissimplot(dftrials,colors,dependent='color')
simhistplot(dftrials)
